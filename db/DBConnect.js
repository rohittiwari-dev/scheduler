import {createPool} from "mysql2";

const pool = new createPool({
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    port: process.env.DB_PORT,
    database: process.env.DB_DATABASE,
});

const checkTables = async () => {
    console.log("Checking for Tables in Database... (it will create automatically if not Exists)")
    try {
        await pool
            .promise()
            .query(
                `CREATE TABLE IF NOT EXISTS USER_TABLE (ID VARCHAR(30) PRIMARY KEY, NAME VARCHAR(40) NOT NULL, GIVEN_NAME VARCHAR(20) NOT NULL, FAMILY_NAME VARCHAR(20) NOT NULL, EMAIL VARCHAR(50) NOT NULL UNIQUE, PICTURE VARCHAR(150) NOT NULL, TYPE VARCHAR(30) NOT NULL, EMAIL_VERIFIED BOOLEAN NOT NULL, PROFESSION VARCHAR(40), CURRENT_DESIGNATION VARCHAR(40), PROFESSIONAL_EXPERIENCE YEAR DEFAULT 0, REFRESH_TOKEN VARCHAR(200) NOT NULL DEFAULT '', ACCESS_TOKEN VARCHAR(400) NOT NULL DEFAULT '', TIMESTAMP DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP)`
            );
        await pool
            .promise()
            .query(
                `CREATE TABLE IF NOT EXISTS SERVICE_TABLE (ID INTEGER AUTO_INCREMENT PRIMARY KEY, SERVICE_TYPE VARCHAR(30) NOT NULL,SERVICE_NAME VARCHAR(30) NOT NULL,SERVICE_DURATION TIME,SERVICE_LOCATION VARCHAR(40) NOT NULL DEFAULT 'GOOGLE MEET',PRICE_PER_HOUR VARCHAR(30) NOT NULL DEFAULT 'FREE',AVAILABILITY JSON, HOST_EMAIL VARCHAR(50) NOT NULL,FOREIGN KEY (HOST_EMAIL) REFERENCES USER_TABLE (EMAIL) ON DELETE CASCADE ON UPDATE CASCADE)`
            );

        await pool
            .promise()
            .query(
                `CREATE TABLE IF NOT EXISTS APPOINTMENT_TABLE (ID INTEGER AUTO_INCREMENT PRIMARY KEY,CLIENT_NAME VARCHAR(30) NOT NULL,CLIENT_EMAIL VARCHAR(50) NOT NULL,GUEST_EMAILS JSON,MEETING_LINK VARCHAR(50),FROM_DATE DATE NOT NULL,TO_DATE DATE NOT NULL,FROM_TIME TIME NOT NULL,TO_TIME TIME NOT NULL,FROM_WEEKDAY VARCHAR(30) NOT NULL,TO_WEEKDAY VARCHAR(30) NOT NULL,EVENT_ID INTEGER NOT NULL,CONSULTANT_EMAIL VARCHAR(50) NOT NULL,FOREIGN KEY (EVENT_ID) REFERENCES SERVICE_TABLE(ID) ON DELETE CASCADE ON UPDATE CASCADE,FOREIGN KEY (CONSULTANT_EMAIL) REFERENCES USER_TABLE(EMAIL) ON DELETE CASCADE ON UPDATE CASCADE)`
            );
    } catch (error) {
        throw error;
    }
};
checkTables().then(r => console.log("Database Created Successfully...")).catch(err => console.log(err));
const db = {
    pool,
    promisePool: pool.promise(),
};
export default db;
